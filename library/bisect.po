# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2021, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# tomo, 2021
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-06-29 12:56+0000\n"
"PO-Revision-Date: 2021-06-28 00:56+0000\n"
"Last-Translator: tomo, 2021\n"
"Language-Team: Japanese (https://www.transifex.com/python-doc/teams/5390/ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/bisect.rst:2
msgid ":mod:`bisect` --- Array bisection algorithm"
msgstr ":mod:`bisect` --- 配列二分法アルゴリズム"

#: ../../library/bisect.rst:10
msgid "**Source code:** :source:`Lib/bisect.py`"
msgstr "**ソースコード:** :source:`Lib/bisect.py`"

#: ../../library/bisect.rst:14
msgid ""
"This module provides support for maintaining a list in sorted order without "
"having to sort the list after each insertion.  For long lists of items with "
"expensive comparison operations, this can be an improvement over the more "
"common approach.  The module is called :mod:`bisect` because it uses a basic"
" bisection algorithm to do its work.  The source code may be most useful as "
"a working example of the algorithm (the boundary conditions are already "
"right!)."
msgstr ""
"このモジュールは、挿入の度にリストをソートすることなく、リストをソートされた順序に保つことをサポートします。大量の比較操作を伴うような、アイテムがたくさんあるリストでは、より一般的なアプローチに比べて、パフォーマンスが向上します。動作に基本的な二分法アルゴリズムを使っているので、"
" :mod:`bisect` と呼ばれています。ソースコードはこのアルゴリズムの実例として一番役に立つかもしれません (境界条件はすでに正しいです!)。"

#: ../../library/bisect.rst:21
msgid "The following functions are provided:"
msgstr "次の関数が用意されています:"

#: ../../library/bisect.rst:26
msgid ""
"Locate the insertion point for *x* in *a* to maintain sorted order. The "
"parameters *lo* and *hi* may be used to specify a subset of the list which "
"should be considered; by default the entire list is used.  If *x* is already"
" present in *a*, the insertion point will be before (to the left of) any "
"existing entries.  The return value is suitable for use as the first "
"parameter to ``list.insert()`` assuming that *a* is already sorted."
msgstr ""
"ソートされた順序を保ったまま *x* を *a* に挿入できる点を探し当てます。リストの中から検索する部分集合を指定するには、パラメータの *lo* と"
" *hi* を使います。デフォルトでは、リスト全体が使われます。*x* がすでに *a* "
"に含まれている場合、挿入点は既存のどのエントリーよりも前(左)になります。戻り値は、``list.insert()`` "
"の第一引数として使うのに適しています。*a* はすでにソートされているものとします。"

#: ../../library/bisect.rst:33
msgid ""
"The returned insertion point *i* partitions the array *a* into two halves so"
" that ``all(val < x for val in a[lo : i])`` for the left side and ``all(val "
">= x for val in a[i : hi])`` for the right side."
msgstr ""

#: ../../library/bisect.rst:37 ../../library/bisect.rst:55
#: ../../library/bisect.rst:67 ../../library/bisect.rst:88
msgid ""
"*key* specifies a :term:`key function` of one argument that is used to "
"extract a comparison key from each input element.  The default value is "
"``None`` (compare the elements directly)."
msgstr ""
"*key* は 1 つの引数からなる :term:`key function` "
"を指定します。この関数は、入力の各要素から比較のキーを取り出すのに使われます。デフォルト値は ``None`` です (要素を直接比較します)。"

#: ../../library/bisect.rst:41 ../../library/bisect.rst:59
#: ../../library/bisect.rst:78 ../../library/bisect.rst:99
msgid "Added the *key* parameter."
msgstr ""

#: ../../library/bisect.rst:48
msgid ""
"Similar to :func:`bisect_left`, but returns an insertion point which comes "
"after (to the right of) any existing entries of *x* in *a*."
msgstr ""
":func:`bisect_left` と似ていますが、 *a* に含まれる *x* "
"のうち、どのエントリーよりも後ろ(右)にくるような挿入点を返します。"

#: ../../library/bisect.rst:51
msgid ""
"The returned insertion point *i* partitions the array *a* into two halves so"
" that ``all(val <= x for val in a[lo : i])`` for the left side and ``all(val"
" > x for val in a[i : hi])`` for the right side."
msgstr ""

#: ../../library/bisect.rst:65
msgid "Insert *x* in *a* in sorted order."
msgstr ""

#: ../../library/bisect.rst:71
msgid ""
"This function first runs :func:`bisect_left` to locate an insertion point. "
"Next, it runs the :meth:`insert` method on *a* to insert *x* at the "
"appropriate position to maintain sort order."
msgstr ""

#: ../../library/bisect.rst:75 ../../library/bisect.rst:96
msgid ""
"Keep in mind that the ``O(log n)`` search is dominated by the slow O(n) "
"insertion step."
msgstr ""

#: ../../library/bisect.rst:85
msgid ""
"Similar to :func:`insort_left`, but inserting *x* in *a* after any existing "
"entries of *x*."
msgstr ""
":func:`insort_left` と似ていますが、 *a* に含まれる *x* のうち、どのエントリーよりも後ろに *x* を挿入します。"

#: ../../library/bisect.rst:92
msgid ""
"This function first runs :func:`bisect_right` to locate an insertion point. "
"Next, it runs the :meth:`insert` method on *a* to insert *x* at the "
"appropriate position to maintain sort order."
msgstr ""

#: ../../library/bisect.rst:104
msgid "Performance Notes"
msgstr ""

#: ../../library/bisect.rst:106
msgid ""
"When writing time sensitive code using *bisect()* and *insort()*, keep these"
" thoughts in mind:"
msgstr ""

#: ../../library/bisect.rst:109
msgid ""
"Bisection is effective for searching ranges of values. For locating specific"
" values, dictionaries are more performant."
msgstr ""

#: ../../library/bisect.rst:112
msgid ""
"The *insort()* functions are ``O(n)`` because the logarithmic search step is"
" dominated by the linear time insertion step."
msgstr ""

#: ../../library/bisect.rst:115
msgid ""
"The search functions are stateless and discard key function results after "
"they are used.  Consequently, if the search functions are used in a loop, "
"the key function may be called again and again on the same array elements. "
"If the key function isn't fast, consider wrapping it with "
":func:`functools.cache` to avoid duplicate computations.  Alternatively, "
"consider searching an array of precomputed keys to locate the insertion "
"point (as shown in the examples section below)."
msgstr ""

#: ../../library/bisect.rst:125
msgid ""
"`Sorted Collections <http://www.grantjenks.com/docs/sortedcollections/>`_ is"
" a high performance module that uses *bisect* to managed sorted collections "
"of data."
msgstr ""

#: ../../library/bisect.rst:129
msgid ""
"The `SortedCollection recipe "
"<https://code.activestate.com/recipes/577197-sortedcollection/>`_ uses "
"bisect to build a full-featured collection class with straight-forward "
"search methods and support for a key-function.  The keys are precomputed to "
"save unnecessary calls to the key function during searches."
msgstr ""

#: ../../library/bisect.rst:137
msgid "Searching Sorted Lists"
msgstr "ソート済みリストの探索"

#: ../../library/bisect.rst:139
msgid ""
"The above :func:`bisect` functions are useful for finding insertion points "
"but can be tricky or awkward to use for common searching tasks. The "
"following five functions show how to transform them into the standard "
"lookups for sorted lists::"
msgstr ""
"上記の :func:`bisect` 関数群は挿入点を探索するのには便利ですが、普通の探索タスクに使うのはトリッキーだったり不器用だったりします。以下の"
" 5 関数は、これらをどのように標準の探索やソート済みリストに変換するかを説明します::"

#: ../../library/bisect.rst:181
msgid "Examples"
msgstr "使用例"

#: ../../library/bisect.rst:185
msgid ""
"The :func:`bisect` function can be useful for numeric table lookups. This "
"example uses :func:`bisect` to look up a letter grade for an exam score "
"(say) based on a set of ordered numeric breakpoints: 90 and up is an 'A', 80"
" to 89 is a 'B', and so on::"
msgstr ""
":func:`bisect` 関数は数値テーブルの探索に役に立ちます。この例では、 :func:`bisect` "
"を使って、(たとえば)順序のついた数値の区切り点の集合に基づいて、試験の成績の等級を表す文字を調べます。区切り点は 90 以上は 'A'、 80 から "
"89 は 'B'、などです::"

#: ../../library/bisect.rst:197
msgid ""
"One technique to avoid repeated calls to a key function is to search a list "
"of precomputed keys to find the index of a record::"
msgstr ""
